// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TvJahnOrchesterApp.Infrastructure.Persistence;

#nullable disable

namespace TvJahnOrchesterApp.Infrastructure.Migrations
{
    [DbContext(typeof(OrchesterDbContext))]
    [Migration("20240127120926_AddImageToTermin")]
    partial class AddImageToTermin
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TvJahnOrchesterApp.Domain.Common.Entities.ArtInstrument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ArtInstrument", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Value = "Holz"
                        },
                        new
                        {
                            Id = 2,
                            Value = "Blech"
                        },
                        new
                        {
                            Id = 3,
                            Value = "Schlagwerk"
                        },
                        new
                        {
                            Id = 4,
                            Value = "Dirigent"
                        });
                });

            modelBuilder.Entity("TvJahnOrchesterApp.Domain.Common.Entities.Instrument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ArtInstrumentId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ArtInstrumentId");

                    b.ToTable("Instrumente", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArtInstrumentId = 1,
                            Value = "Saxophon"
                        },
                        new
                        {
                            Id = 2,
                            ArtInstrumentId = 2,
                            Value = "Trompete"
                        },
                        new
                        {
                            Id = 3,
                            ArtInstrumentId = 3,
                            Value = "Trommel"
                        },
                        new
                        {
                            Id = 4,
                            ArtInstrumentId = 4,
                            Value = "Dirigent"
                        });
                });

            modelBuilder.Entity("TvJahnOrchesterApp.Domain.Common.Entities.MitgliedsStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MitgliedsStatus", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Value = "aktiv"
                        },
                        new
                        {
                            Id = 2,
                            Value = "passiv"
                        },
                        new
                        {
                            Id = 3,
                            Value = "ausgetreten"
                        });
                });

            modelBuilder.Entity("TvJahnOrchesterApp.Domain.Common.Entities.Noten", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Noten", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Value = "Schwarzes Marschbuch"
                        },
                        new
                        {
                            Id = 2,
                            Value = "Blaues Marschbuch"
                        },
                        new
                        {
                            Id = 3,
                            Value = "Rotes Marschbuch"
                        },
                        new
                        {
                            Id = 4,
                            Value = "Konzertmappe"
                        },
                        new
                        {
                            Id = 6,
                            Value = "St. Martin Noten"
                        },
                        new
                        {
                            Id = 7,
                            Value = "Karnevalsnoten"
                        },
                        new
                        {
                            Id = 5,
                            Value = "Weihnachtsnoten"
                        });
                });

            modelBuilder.Entity("TvJahnOrchesterApp.Domain.Common.Entities.Notenstimme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Notenstimme", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Value = "Alt Saxophon 1"
                        },
                        new
                        {
                            Id = 2,
                            Value = "Alt Saxophon 2"
                        },
                        new
                        {
                            Id = 3,
                            Value = "Sopran Saxophon"
                        },
                        new
                        {
                            Id = 4,
                            Value = "Trompete 1"
                        },
                        new
                        {
                            Id = 5,
                            Value = "Trompete 2"
                        },
                        new
                        {
                            Id = 6,
                            Value = "Trompete 3"
                        },
                        new
                        {
                            Id = 7,
                            Value = "Schlagzeug"
                        });
                });

            modelBuilder.Entity("TvJahnOrchesterApp.Domain.Common.Entities.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Positions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Value = "Dirigent"
                        },
                        new
                        {
                            Id = 2,
                            Value = "Obmann"
                        },
                        new
                        {
                            Id = 3,
                            Value = "Kassierer"
                        },
                        new
                        {
                            Id = 4,
                            Value = "Notenwart"
                        },
                        new
                        {
                            Id = 5,
                            Value = "Zeugwart"
                        },
                        new
                        {
                            Id = 6,
                            Value = "Thekenteam"
                        });
                });

            modelBuilder.Entity("TvJahnOrchesterApp.Domain.Common.Entities.Rückmeldungsart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Rückmeldungsarten", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Value = "Nicht Zurückgemeldet"
                        },
                        new
                        {
                            Id = 3,
                            Value = "Zugesagt"
                        },
                        new
                        {
                            Id = 2,
                            Value = "Abgesagt"
                        });
                });

            modelBuilder.Entity("TvJahnOrchesterApp.Domain.Common.Entities.TerminArt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TerminArten", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Value = "Auftritt"
                        },
                        new
                        {
                            Id = 3,
                            Value = "Konzert"
                        },
                        new
                        {
                            Id = 2,
                            Value = "Probe"
                        },
                        new
                        {
                            Id = 4,
                            Value = "Freizeit"
                        },
                        new
                        {
                            Id = 5,
                            Value = "Reise"
                        });
                });

            modelBuilder.Entity("TvJahnOrchesterApp.Domain.Common.Entities.TerminStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TerminStatus", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Value = "Angefragt"
                        },
                        new
                        {
                            Id = 2,
                            Value = "Zugesagt"
                        },
                        new
                        {
                            Id = 3,
                            Value = "Abgesagt"
                        });
                });

            modelBuilder.Entity("TvJahnOrchesterApp.Domain.Common.Entities.Uniform", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Uniform", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Value = "Blaues Hemd"
                        },
                        new
                        {
                            Id = 2,
                            Value = "Weiße Hose"
                        },
                        new
                        {
                            Id = 3,
                            Value = "Jacket"
                        },
                        new
                        {
                            Id = 4,
                            Value = "Winter Jacke"
                        },
                        new
                        {
                            Id = 5,
                            Value = "Zivil"
                        });
                });

            modelBuilder.Entity("TvJahnOrchesterApp.Domain.OrchesterMitgliedAggregate.OrchesterMitglied", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("OrchesterMitgliedsId");

                    b.Property<string>("ConnectedUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("DefaultInstrument")
                        .HasColumnType("int");

                    b.Property<int?>("DefaultNotenStimme")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Geburtstag")
                        .HasColumnType("datetime2");

                    b.Property<string>("Handynummer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("MemberSince")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MemberSinceInYears")
                        .HasColumnType("int");

                    b.Property<string>("Nachname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OrchesterMitgliedsStatus")
                        .HasColumnType("int");

                    b.Property<string>("RegisterKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegisterKeyExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Telefonnummer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UserFirstConnected")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UserLastLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("Vorname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ConnectedUserId")
                        .IsUnique()
                        .HasFilter("[ConnectedUserId] IS NOT NULL");

                    b.HasIndex("DefaultInstrument");

                    b.HasIndex("DefaultNotenStimme");

                    b.HasIndex("OrchesterMitgliedsStatus");

                    b.ToTable("Orchestermitglieder", (string)null);
                });

            modelBuilder.Entity("TvJahnOrchesterApp.Domain.TerminAggregate.Termin", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TerminId");

                    b.Property<Guid?>("AbstimmungsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("TerminArt")
                        .HasColumnType("int");

                    b.Property<int?>("TerminStatus")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TerminArt");

                    b.HasIndex("TerminStatus");

                    b.ToTable("Termine", (string)null);
                });

            modelBuilder.Entity("TvJahnOrchesterApp.Domain.UserAggregate.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("OrchesterMitgliedsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("OrchesterMitgliedsId")
                        .IsUnique();

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TvJahnOrchesterApp.Domain.UserAggregate.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TvJahnOrchesterApp.Domain.UserAggregate.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TvJahnOrchesterApp.Domain.UserAggregate.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TvJahnOrchesterApp.Domain.UserAggregate.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TvJahnOrchesterApp.Domain.Common.Entities.Instrument", b =>
                {
                    b.HasOne("TvJahnOrchesterApp.Domain.Common.Entities.ArtInstrument", null)
                        .WithMany()
                        .HasForeignKey("ArtInstrumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TvJahnOrchesterApp.Domain.OrchesterMitgliedAggregate.OrchesterMitglied", b =>
                {
                    b.HasOne("TvJahnOrchesterApp.Domain.UserAggregate.User", null)
                        .WithOne()
                        .HasForeignKey("TvJahnOrchesterApp.Domain.OrchesterMitgliedAggregate.OrchesterMitglied", "ConnectedUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("TvJahnOrchesterApp.Domain.Common.Entities.Instrument", null)
                        .WithMany()
                        .HasForeignKey("DefaultInstrument")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("TvJahnOrchesterApp.Domain.Common.Entities.Notenstimme", null)
                        .WithMany()
                        .HasForeignKey("DefaultNotenStimme")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("TvJahnOrchesterApp.Domain.Common.Entities.MitgliedsStatus", null)
                        .WithMany()
                        .HasForeignKey("OrchesterMitgliedsStatus")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.OwnsOne("TvJahnOrchesterApp.Domain.Common.ValueObjects.Adresse", "Adresse", b1 =>
                        {
                            b1.Property<Guid>("OrchesterMitgliedId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Hausnummer")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<decimal?>("Latitude")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<decimal?>("Longitide")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<string>("Postleitzahl")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Stadt")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Straße")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Zusatz")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OrchesterMitgliedId");

                            b1.ToTable("Orchestermitglieder");

                            b1.WithOwner()
                                .HasForeignKey("OrchesterMitgliedId");
                        });

                    b.OwnsMany("TvJahnOrchesterApp.Domain.OrchesterMitgliedAggregate.Entities.OrchesterMitgliedPositionsMapping", "PositionMappings", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid?>("OrchesterMitgliedsId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("PositionId")
                                .HasColumnType("int");

                            b1.HasKey("Id");

                            b1.HasIndex("OrchesterMitgliedsId");

                            b1.HasIndex("PositionId");

                            b1.ToTable("OrchestermitgliedPositions", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("OrchesterMitgliedsId");

                            b1.HasOne("TvJahnOrchesterApp.Domain.Common.Entities.Position", null)
                                .WithMany()
                                .HasForeignKey("PositionId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();
                        });

                    b.Navigation("Adresse")
                        .IsRequired();

                    b.Navigation("PositionMappings");
                });

            modelBuilder.Entity("TvJahnOrchesterApp.Domain.TerminAggregate.Termin", b =>
                {
                    b.HasOne("TvJahnOrchesterApp.Domain.Common.Entities.TerminArt", null)
                        .WithMany()
                        .HasForeignKey("TerminArt")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("TvJahnOrchesterApp.Domain.Common.Entities.TerminStatus", null)
                        .WithMany()
                        .HasForeignKey("TerminStatus")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.OwnsOne("TvJahnOrchesterApp.Domain.TerminAggregate.Entities.EinsatzPlan", "EinsatzPlan", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("EinsatzplanId");

                            b1.Property<Guid>("TerminId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime>("EndZeit")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime>("StartZeit")
                                .HasColumnType("datetime2");

                            b1.Property<string>("WeitereInformationen")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("Id", "TerminId");

                            b1.HasIndex("TerminId")
                                .IsUnique();

                            b1.ToTable("Einsatzpläne", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("TerminId");

                            b1.OwnsOne("TvJahnOrchesterApp.Domain.Common.ValueObjects.Adresse", "Treffpunkt", b2 =>
                                {
                                    b2.Property<Guid>("EinsatzPlanId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<Guid>("EinsatzPlanTerminId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<string>("Hausnummer")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<decimal?>("Latitude")
                                        .HasColumnType("decimal(18,2)");

                                    b2.Property<decimal?>("Longitide")
                                        .HasColumnType("decimal(18,2)");

                                    b2.Property<string>("Postleitzahl")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Stadt")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Straße")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Zusatz")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("EinsatzPlanId", "EinsatzPlanTerminId");

                                    b2.ToTable("Einsatzpläne");

                                    b2.WithOwner()
                                        .HasForeignKey("EinsatzPlanId", "EinsatzPlanTerminId");
                                });

                            b1.OwnsMany("TvJahnOrchesterApp.Domain.TerminAggregate.Entities.EinsatzplanNotenMapping", "EinsatzplanNotenMappings", b2 =>
                                {
                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int");

                                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b2.Property<int>("Id"));

                                    b2.Property<Guid?>("EinsatzplanId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<int>("NotenId")
                                        .HasColumnType("int");

                                    b2.Property<Guid?>("TerminId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.HasKey("Id");

                                    b2.HasIndex("NotenId");

                                    b2.HasIndex("EinsatzplanId", "TerminId");

                                    b2.ToTable("EinsatzplanNotenMapping", (string)null);

                                    b2.HasOne("TvJahnOrchesterApp.Domain.Common.Entities.Noten", null)
                                        .WithMany()
                                        .HasForeignKey("NotenId")
                                        .OnDelete(DeleteBehavior.Cascade)
                                        .IsRequired();

                                    b2.WithOwner()
                                        .HasForeignKey("EinsatzplanId", "TerminId");
                                });

                            b1.OwnsMany("TvJahnOrchesterApp.Domain.TerminAggregate.Entities.EinsatzplanUniformMapping", "EinsatzplanUniformMappings", b2 =>
                                {
                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int");

                                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b2.Property<int>("Id"));

                                    b2.Property<Guid?>("EinsatzplanId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<Guid?>("TerminId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<int>("UniformId")
                                        .HasColumnType("int");

                                    b2.HasKey("Id");

                                    b2.HasIndex("UniformId");

                                    b2.HasIndex("EinsatzplanId", "TerminId");

                                    b2.ToTable("EinsatzplanUniformMapping", (string)null);

                                    b2.HasOne("TvJahnOrchesterApp.Domain.Common.Entities.Uniform", null)
                                        .WithMany()
                                        .HasForeignKey("UniformId")
                                        .OnDelete(DeleteBehavior.Cascade)
                                        .IsRequired();

                                    b2.WithOwner()
                                        .HasForeignKey("EinsatzplanId", "TerminId");
                                });

                            b1.OwnsMany("TvJahnOrchesterApp.Domain.TerminAggregate.Entities.ZeitBlock", "ZeitBlocks", b2 =>
                                {
                                    b2.Property<Guid>("Id")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<Guid>("EinsatzplanId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<Guid>("TerminId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<string>("Beschreibung")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<DateTime>("Endzeit")
                                        .HasColumnType("datetime2");

                                    b2.Property<DateTime>("Startzeit")
                                        .HasColumnType("datetime2");

                                    b2.HasKey("Id", "EinsatzplanId", "TerminId");

                                    b2.HasIndex("EinsatzplanId", "TerminId");

                                    b2.ToTable("Zeitblöcke", (string)null);

                                    b2.WithOwner()
                                        .HasForeignKey("EinsatzplanId", "TerminId");

                                    b2.OwnsOne("TvJahnOrchesterApp.Domain.Common.ValueObjects.Adresse", "Adresse", b3 =>
                                        {
                                            b3.Property<Guid>("ZeitBlockId")
                                                .HasColumnType("uniqueidentifier");

                                            b3.Property<Guid>("ZeitBlockEinsatzplanId")
                                                .HasColumnType("uniqueidentifier");

                                            b3.Property<Guid>("ZeitBlockTerminId")
                                                .HasColumnType("uniqueidentifier");

                                            b3.Property<string>("Hausnummer")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<decimal?>("Latitude")
                                                .HasColumnType("decimal(18,2)");

                                            b3.Property<decimal?>("Longitide")
                                                .HasColumnType("decimal(18,2)");

                                            b3.Property<string>("Postleitzahl")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("Stadt")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("Straße")
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<string>("Zusatz")
                                                .HasColumnType("nvarchar(max)");

                                            b3.HasKey("ZeitBlockId", "ZeitBlockEinsatzplanId", "ZeitBlockTerminId");

                                            b3.ToTable("Zeitblöcke");

                                            b3.WithOwner()
                                                .HasForeignKey("ZeitBlockId", "ZeitBlockEinsatzplanId", "ZeitBlockTerminId");
                                        });

                                    b2.Navigation("Adresse");
                                });

                            b1.Navigation("EinsatzplanNotenMappings");

                            b1.Navigation("EinsatzplanUniformMappings");

                            b1.Navigation("Treffpunkt")
                                .IsRequired();

                            b1.Navigation("ZeitBlocks");
                        });

                    b.OwnsMany("TvJahnOrchesterApp.Domain.TerminAggregate.Entities.TerminRückmeldungOrchestermitglied", "TerminRückmeldungOrchesterMitglieder", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("TerminRückmeldungsId");

                            b1.Property<Guid>("TerminId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<bool>("IstAnwesend")
                                .HasColumnType("bit");

                            b1.Property<string>("KommentarAnwesenheit")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("KommentarZusage")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime?>("LetzteRückmeldung")
                                .HasColumnType("datetime2");

                            b1.Property<Guid>("OrchesterMitgliedsId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid?>("RückmeldungDurchAnderesOrchestermitglied")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Zugesagt")
                                .HasColumnType("int");

                            b1.HasKey("Id", "TerminId");

                            b1.HasIndex("OrchesterMitgliedsId");

                            b1.HasIndex("RückmeldungDurchAnderesOrchestermitglied");

                            b1.HasIndex("TerminId");

                            b1.ToTable("TerminRückmeldungen", (string)null);

                            b1.HasOne("TvJahnOrchesterApp.Domain.OrchesterMitgliedAggregate.OrchesterMitglied", null)
                                .WithMany()
                                .HasForeignKey("OrchesterMitgliedsId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.HasOne("TvJahnOrchesterApp.Domain.OrchesterMitgliedAggregate.OrchesterMitglied", null)
                                .WithMany()
                                .HasForeignKey("RückmeldungDurchAnderesOrchestermitglied");

                            b1.WithOwner()
                                .HasForeignKey("TerminId");

                            b1.OwnsMany("TvJahnOrchesterApp.Domain.TerminAggregate.Entities.TerminRückmeldungInstrumentMapping", "TerminRückmeldungInstrumentMappings", b2 =>
                                {
                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int");

                                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b2.Property<int>("Id"));

                                    b2.Property<int>("InstrumentId")
                                        .HasColumnType("int");

                                    b2.Property<Guid?>("TerminId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<Guid?>("TerminRückmeldungsId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.HasKey("Id");

                                    b2.HasIndex("InstrumentId");

                                    b2.HasIndex("TerminRückmeldungsId", "TerminId");

                                    b2.ToTable("TerminRückmeldungInstrumentMapping", (string)null);

                                    b2.HasOne("TvJahnOrchesterApp.Domain.Common.Entities.Instrument", null)
                                        .WithMany()
                                        .HasForeignKey("InstrumentId")
                                        .OnDelete(DeleteBehavior.Cascade)
                                        .IsRequired();

                                    b2.WithOwner()
                                        .HasForeignKey("TerminRückmeldungsId", "TerminId");
                                });

                            b1.OwnsMany("TvJahnOrchesterApp.Domain.TerminAggregate.Entities.TerminRückmeldungNotenstimmenMapping", "TerminRückmeldungNotenstimmenMappings", b2 =>
                                {
                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int");

                                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b2.Property<int>("Id"));

                                    b2.Property<int>("NotenstimmenId")
                                        .HasColumnType("int");

                                    b2.Property<Guid?>("TerminId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<Guid?>("TerminRückmeldungsId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.HasKey("Id");

                                    b2.HasIndex("NotenstimmenId");

                                    b2.HasIndex("TerminRückmeldungsId", "TerminId");

                                    b2.ToTable("TerminRückmeldungNotenstimmeMapping", (string)null);

                                    b2.HasOne("TvJahnOrchesterApp.Domain.Common.Entities.Notenstimme", null)
                                        .WithMany()
                                        .HasForeignKey("NotenstimmenId")
                                        .OnDelete(DeleteBehavior.Cascade)
                                        .IsRequired();

                                    b2.WithOwner()
                                        .HasForeignKey("TerminRückmeldungsId", "TerminId");
                                });

                            b1.Navigation("TerminRückmeldungInstrumentMappings");

                            b1.Navigation("TerminRückmeldungNotenstimmenMappings");
                        });

                    b.Navigation("EinsatzPlan")
                        .IsRequired();

                    b.Navigation("TerminRückmeldungOrchesterMitglieder");
                });

            modelBuilder.Entity("TvJahnOrchesterApp.Domain.UserAggregate.User", b =>
                {
                    b.HasOne("TvJahnOrchesterApp.Domain.OrchesterMitgliedAggregate.OrchesterMitglied", null)
                        .WithOne()
                        .HasForeignKey("TvJahnOrchesterApp.Domain.UserAggregate.User", "OrchesterMitgliedsId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
